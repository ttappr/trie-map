var searchIndex = JSON.parse('{\
"trie_map":{"doc":"","t":"DDALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLALLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["TrieMap","TrieSet","base16","borrow","borrow","borrow_mut","borrow_mut","clear","clear","contains","contains","contains_by_iter","contains_by_iter","default","default","fmt","fmt","from","from","from_iter","get","get_by_iter","get_mut","get_mut_by_iter","get_or_insert","get_or_insert_by_iter","get_or_insert_by_iter_with","get_or_insert_with","insert","insert","insert_by_iter","insert_by_iter","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","iter","iter","iter_mut","iterators","keys","len","len","new","new","remove","remove","remove_by_iter","remove_by_iter","try_from","try_from","try_into","try_into","type_id","type_id","values","with_capacity","TrieMapBase16","TrieSetBase16","borrow","borrow","borrow_mut","borrow_mut","clear","clear","contains","contains","contains_by_iter","contains_by_iter","default","fmt","fmt","from","from","get","get_by_iter","get_mut","get_mut_by_iter","get_or_insert","get_or_insert_by_iter","get_or_insert_by_iter_with","get_or_insert_with","insert","insert","insert_by_iter","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","iter","iter","iter_mut","keys","len","len","map_iterators","new","new","remove","remove","remove_by_iter","remove_by_iter","set_iterators","try_from","try_from","try_into","try_into","type_id","type_id","values","IntoIter","Iter","IterMut","Keys","Values","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","IntoIter","Iter","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","into_iter","into_iter","next","next","next_back","next_back","try_from","try_from","try_into","try_into","type_id","type_id","IntoIter","Iter","IterMut","Keys","Values","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"trie_map"],[62,"trie_map::base16"],[120,"trie_map::base16::map_iterators"],[175,"trie_map::base16::set_iterators"],[197,"trie_map::iterators"],[252,"core::convert"],[253,"core::iter::traits::iterator"],[254,"core::fmt"],[255,"core::fmt"],[256,"core::option"],[257,"core::ops::function"],[258,"core::result"],[259,"core::any"],[260,"core::borrow"]],"d":["A trie-based Map keyed on sequences of bytes with values …","A set implemented using TrieMap. Internally this is a …","This module provides the <code>TrieMapBase16</code> and <code>TrieSetBase16</code> …","","","","","Clears the trie, removing all values.","Removes all elements from the set.","Returns <code>true</code> if the trie contains a value at the given …","Reports whether the set contains the given key.","Returns <code>true</code> if the trie contains a value at the given …","Reports whether the set contains the given key. The key is …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Accesses a value in the trie at the given key, if it …","Accesses a value in the trie at the given key, if it …","Returns a mutable reference to a value in the trie at the …","Returns a mutable reference to a value in the trie at the …","Returns a mutable reference to a value in the trie at the …","Returns a mutable reference to a value in the trie at the …","Returns a mutable reference to a value in the trie at the …","Returns a mutable reference to a value in the trie at the …","Inserts a value into the trie at the given key. If the key …","Inserts the given key into the set. Returns true if the …","Inserts a value into the trie at the given key. The trait …","Inserts the given key into the set. Returns true if the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns <code>true</code> if the trie contains no values, otherwise …","Returns true if the set contains no elements.","Returns an iterator over the key-value pairs in the trie.","Returns an iterator over the keys of the set.","Returns an iterator over the mutable key-value pairs in …","Iterators, The Iterators Used in TrieMap","Returns an iterator over the keys in the trie.","Returns the number of values in the trie.","Returns the number of elements in the set.","Creates a new empty trie.","Creates a new empty TrieSet.","Removes a value from the trie at the given key, if it …","Removes the given key from the set. Returns true if the …","Removes a value from the trie at the given key, if it …","Removes the given key from the set. Returns true if the …","","","","","","","Returns an iterator over the values in the trie.","Creates a new empty trie with the given capacity. Only the …","A trie whose keys can be any string with no restrictions …","A set implemented as a trie that encodes its keys as base …","","","","","Removes all key-value pairs from the map.","Removes all elements from the set.","Returns <code>true</code> if the map contains a value for the specified …","Reports whether the set contains the given key.","Returns <code>true</code> if the map contains a value for the specified …","Reports whether the set contains the given key. The key is …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key, …","Returns a reference to the value corresponding to the key, …","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value corresponding to …","If the key-value pair is not present in the map, inserts …","If the key-value pair is not present in the map, inserts …","If the key-value pair is not present in the map, inserts …","If the key-value pair is not present in the map, inserts …","Inserts a key-value pair into the map. If the key already …","Inserts the given key into the set. Returns true if the …","Inserts the given key into the set. Returns true if the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns <code>true</code> if the map contains no key-value pairs.","Reports whether the set is empty.","Returns an iterator over the key-value pairs of the map in …","Returns an iterator over the set.","Returns an iterator over the key-value pairs of the map. …","Returns an iterator over the keys of the map in canonical …","Returns the number of key-value pairs in the map.","Returns an iterator over the set.","","Creates an empty <code>TrieMapBase16</code>.","Creates a new empty TrieSet.","Removes a key from the map, returning the value at the key …","Removes the given key from the set. Returns true if the …","Removes a key from the map, returning the value at the key …","Removes the given key from the set. Returns true if the …","","","","","","","","Returns an iterator over the values of the map. They will …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An owning iterator over the elements of a TrieSet.","An iterator over the elements of a TrieSet.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A consuming iterator over the key-value pairs of a <code>TrieMap</code>.","An iterator over the key-value pairs of a <code>TrieMap</code> that …","An iterator over the key-value pairs of a <code>TrieMap</code> that …","An iterator over the keys of a <code>TrieMap</code> that holds an …","An iterator over the values of a <code>TrieMap</code> that holds an …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,1,1,1,1,1,1,1,1,1,3,1,3,1,3,1,1,1,3,3,1,3,1,3,1,0,1,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,1,0,0,22,23,22,23,22,23,22,23,22,23,23,22,23,22,23,22,22,22,22,22,22,22,22,22,23,23,22,23,22,22,22,23,23,22,23,22,23,22,22,22,23,0,22,23,22,23,22,23,0,22,23,22,23,22,23,22,0,0,0,0,0,31,26,28,29,30,31,26,28,29,30,31,26,28,29,30,31,26,28,29,30,31,26,28,29,30,31,26,28,29,30,31,26,28,29,30,31,26,28,29,30,31,26,28,29,30,31,26,28,29,30,0,0,27,32,27,32,27,32,27,32,27,32,27,32,27,32,27,32,27,32,27,32,0,0,0,0,0,33,15,16,17,21,33,15,16,17,21,33,15,16,17,21,33,15,16,17,21,33,15,16,17,21,33,15,16,17,21,33,15,16,17,21,33,15,16,17,21,33,15,16,17,21,33,15,16,17,21],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],2,[]],[3,2],[[[1,[-1]],-2],4,[],[[7,[[6,[5]]]]]],[[3,-1],4,[[7,[[6,[5]]]]]],[[[1,[-1]],-2],4,[],8],[[3,-1],4,8],[[],[[1,[-1]]],[]],[[],3],[[[1,[-1]],9],10,11],[[3,9],10],[-1,-1,[]],[-1,-1,[]],[-1,[[1,[-2]]],12,[]],[[[1,[-1]],-2],[[13,[-1]]],[],[[7,[[6,[5]]]]]],[[[1,[-1]],-2],[[13,[-1]]],[],8],[[[1,[-1]],-2],[[13,[-1]]],[],[[7,[[6,[5]]]]]],[[[1,[-1]],-2],[[13,[-1]]],[],8],[[[1,[-1]],-2,-1],-1,[],[[7,[[6,[5]]]]]],[[[1,[-1]],-2,-1],-1,[],8],[[[1,[-1]],-2,-3],-1,[],8,14],[[[1,[-1]],-2,-3],-1,[],[[7,[[6,[5]]]]],14],[[[1,[-1]],-2,-1],[[13,[-1]]],[],[[7,[[6,[5]]]]]],[[3,-1],4,[[7,[[6,[5]]]]]],[[[1,[-1]],-2,-1],[[13,[-1]]],[],8],[[3,-1],4,8],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[],[]],[[[1,[-1]]],[],[]],[3],[3],[[[1,[-1]]],4,[]],[3,4],[[[1,[-1]]],[[15,[-1]]],[]],0,[[[1,[-1]]],[[16,[-1]]],[]],0,[[[1,[-1]]],[[17,[-1]]],[]],[[[1,[-1]]],18,[]],[3,18],[[],[[1,[-1]]],[]],[[],3],[[[1,[-1]],-2],[[13,[-1]]],[],[[7,[[6,[5]]]]]],[[3,-1],4,[[7,[[6,[5]]]]]],[[[1,[-1]],-2],[[13,[-1]]],[],8],[[3,-1],4,8],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[[[1,[-1]]],[[21,[-1]]],[]],[18,[[1,[-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],2,[]],[23,2],[[[22,[-1]],24],4,[]],[[23,24],4],[[[22,[-1]],-2],4,[],8],[[23,-1],4,8],[[],23],[[[22,[-1]],9],10,11],[[23,9],10],[-1,-1,[]],[-1,-1,[]],[[[22,[-1]],24],[[13,[-1]]],[]],[[[22,[-1]],-2],[[13,[-1]]],[],8],[[[22,[-1]],24],[[13,[-1]]],[]],[[[22,[-1]],-2],[[13,[-1]]],[],8],[[[22,[-1]],-2,-1],-1,[],[[25,[24]]]],[[[22,[-1]],-2,-1],-1,[],8],[[[22,[-1]],-2,-3],-1,[],8,14],[[[22,[-1]],-2,-3],-1,[],[[25,[24]]],14],[[[22,[-1]],-2,-1],[[13,[-1]]],[],[[25,[24]]]],[[23,-1],4,[[25,[24]]]],[[23,-1],4,8],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],[],[]],[[[22,[-1]]],[],[]],[[[22,[-1]]],[],[]],[23],[23],[[[22,[-1]]],4,[]],[23,4],[[[22,[-1]]],[[26,[-1]]],[]],[23,27],[[[22,[-1]]],[[28,[-1]]],[]],[[[22,[-1]]],[[29,[-1]]],[]],[[[22,[-1]]],18,[]],[23,18],0,[[],[[22,[-1]]],[]],[[],23],[[[22,[-1]],24],[[13,[-1]]],[]],[[23,24],4],[[[22,[-1]],-2],[[13,[-1]]],[],8],[[23,-1],4,8],0,[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[[[22,[-1]]],[[30,[-1]]],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[31,[-1]]],13,[]],[[[26,[-1]]],13,[]],[[[28,[-1]]],13,[]],[[[29,[-1]]],13,[]],[[[30,[-1]]],13,[]],[[[31,[-1]]],13,[]],[[[26,[-1]]],13,[]],[[[28,[-1]]],13,[]],[[[29,[-1]]],13,[]],[[[30,[-1]]],13,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,13],[32,13],[27,13],[32,13],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1]]],13,[]],[[[15,[-1]]],13,[]],[[[16,[-1]]],13,[]],[[[17,[-1]]],13,[]],[[[21,[-1]]],13,[]],[[[33,[-1]]],13,[]],[[[15,[-1]]],13,[]],[[[16,[-1]]],13,[]],[[[17,[-1]]],13,[]],[[[21,[-1]]],13,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]]],"c":[],"p":[[3,"TrieMap",0],[15,"tuple"],[3,"TrieSet",0],[15,"bool"],[15,"u8"],[15,"slice"],[8,"AsRef",252],[8,"Iterator",253],[3,"Formatter",254],[6,"Result",254],[8,"Debug",254],[8,"IntoIterator",255],[4,"Option",256],[8,"FnOnce",257],[3,"Iter",197],[3,"IterMut",197],[3,"Keys",197],[15,"usize"],[4,"Result",258],[3,"TypeId",259],[3,"Values",197],[3,"TrieMapBase16",62],[3,"TrieSetBase16",62],[15,"str"],[8,"Borrow",260],[3,"Iter",120],[3,"Iter",175],[3,"IterMut",120],[3,"Keys",120],[3,"Values",120],[3,"IntoIter",120],[3,"IntoIter",175],[3,"IntoIter",197]],"b":[[34,"impl-IntoIterator-for-%26TrieMap%3CV,+R,+B%3E"],[35,"impl-IntoIterator-for-TrieMap%3CV,+R,+B%3E"],[36,"impl-IntoIterator-for-%26mut+TrieMap%3CV,+R,+B%3E"],[37,"impl-IntoIterator-for-TrieSet%3CR,+B%3E"],[38,"impl-IntoIterator-for-%26TrieSet%3CR,+B%3E"],[92,"impl-IntoIterator-for-%26mut+TrieMapBase16%3CV%3E"],[93,"impl-IntoIterator-for-%26TrieMapBase16%3CV%3E"],[94,"impl-IntoIterator-for-TrieMapBase16%3CV%3E"],[95,"impl-IntoIterator-for-%26TrieSetBase16"],[96,"impl-IntoIterator-for-TrieSetBase16"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
